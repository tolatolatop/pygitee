# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommentTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue': 'CommentSourceIssue',
        'pull_request': 'bool'
    }

    attribute_map = {
        'issue': 'issue',
        'pull_request': 'pull_request'
    }

    def __init__(self, issue=None, pull_request=None):  # noqa: E501
        """CommentTarget - a model defined in Swagger"""  # noqa: E501
        self._issue = None
        self._pull_request = None
        self.discriminator = None
        self.issue = issue
        self.pull_request = pull_request

    @property
    def issue(self):
        """Gets the issue of this CommentTarget.  # noqa: E501


        :return: The issue of this CommentTarget.  # noqa: E501
        :rtype: CommentSourceIssue
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this CommentTarget.


        :param issue: The issue of this CommentTarget.  # noqa: E501
        :type: CommentSourceIssue
        """
        if issue is None:
            raise ValueError("Invalid value for `issue`, must not be `None`")  # noqa: E501

        self._issue = issue

    @property
    def pull_request(self):
        """Gets the pull_request of this CommentTarget.  # noqa: E501


        :return: The pull_request of this CommentTarget.  # noqa: E501
        :rtype: bool
        """
        return self._pull_request

    @pull_request.setter
    def pull_request(self, pull_request):
        """Sets the pull_request of this CommentTarget.


        :param pull_request: The pull_request of this CommentTarget.  # noqa: E501
        :type: bool
        """
        if pull_request is None:
            raise ValueError("Invalid value for `pull_request`, must not be `None`")  # noqa: E501

        self._pull_request = pull_request

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommentTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
