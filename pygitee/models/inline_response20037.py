# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20037(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'data': 'str',
        'repo': 'Repo',
        'total_score': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'data': 'data',
        'repo': 'repo',
        'total_score': 'total_score'
    }

    def __init__(self, created_at=None, data=None, repo=None, total_score=None):  # noqa: E501
        """InlineResponse20037 - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._data = None
        self._repo = None
        self._total_score = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if data is not None:
            self.data = data
        if repo is not None:
            self.repo = repo
        if total_score is not None:
            self.total_score = total_score

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20037.  # noqa: E501


        :return: The created_at of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20037.


        :param created_at: The created_at of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this InlineResponse20037.  # noqa: E501


        :return: The data of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InlineResponse20037.


        :param data: The data of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def repo(self):
        """Gets the repo of this InlineResponse20037.  # noqa: E501


        :return: The repo of this InlineResponse20037.  # noqa: E501
        :rtype: Repo
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this InlineResponse20037.


        :param repo: The repo of this InlineResponse20037.  # noqa: E501
        :type: Repo
        """

        self._repo = repo

    @property
    def total_score(self):
        """Gets the total_score of this InlineResponse20037.  # noqa: E501


        :return: The total_score of this InlineResponse20037.  # noqa: E501
        :rtype: str
        """
        return self._total_score

    @total_score.setter
    def total_score(self, total_score):
        """Sets the total_score of this InlineResponse20037.


        :param total_score: The total_score of this InlineResponse20037.  # noqa: E501
        :type: str
        """

        self._total_score = total_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20037, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20037):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
