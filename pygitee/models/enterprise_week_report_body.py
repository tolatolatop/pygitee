# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnterpriseWeekReportBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'content': 'str',
        '_date': 'str',
        'week_index': 'int',
        'year': 'int'
    }

    attribute_map = {
        'access_token': 'access_token',
        'content': 'content',
        '_date': 'date',
        'week_index': 'week_index',
        'year': 'year'
    }

    def __init__(self, access_token=None, content=None, _date=None, week_index=None, year=None):  # noqa: E501
        """EnterpriseWeekReportBody - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._content = None
        self.__date = None
        self._week_index = None
        self._year = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        self.content = content
        if _date is not None:
            self._date = _date
        self.week_index = week_index
        self.year = year

    @property
    def access_token(self):
        """Gets the access_token of this EnterpriseWeekReportBody.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this EnterpriseWeekReportBody.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this EnterpriseWeekReportBody.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this EnterpriseWeekReportBody.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def content(self):
        """Gets the content of this EnterpriseWeekReportBody.  # noqa: E501

        周报内容  # noqa: E501

        :return: The content of this EnterpriseWeekReportBody.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this EnterpriseWeekReportBody.

        周报内容  # noqa: E501

        :param content: The content of this EnterpriseWeekReportBody.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def _date(self):
        """Gets the _date of this EnterpriseWeekReportBody.  # noqa: E501

        周报日期(格式：2019-03-25)  # noqa: E501

        :return: The _date of this EnterpriseWeekReportBody.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EnterpriseWeekReportBody.

        周报日期(格式：2019-03-25)  # noqa: E501

        :param _date: The _date of this EnterpriseWeekReportBody.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def week_index(self):
        """Gets the week_index of this EnterpriseWeekReportBody.  # noqa: E501

        周报所属周  # noqa: E501

        :return: The week_index of this EnterpriseWeekReportBody.  # noqa: E501
        :rtype: int
        """
        return self._week_index

    @week_index.setter
    def week_index(self, week_index):
        """Sets the week_index of this EnterpriseWeekReportBody.

        周报所属周  # noqa: E501

        :param week_index: The week_index of this EnterpriseWeekReportBody.  # noqa: E501
        :type: int
        """
        if week_index is None:
            raise ValueError("Invalid value for `week_index`, must not be `None`")  # noqa: E501

        self._week_index = week_index

    @property
    def year(self):
        """Gets the year of this EnterpriseWeekReportBody.  # noqa: E501

        周报所属年  # noqa: E501

        :return: The year of this EnterpriseWeekReportBody.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EnterpriseWeekReportBody.

        周报所属年  # noqa: E501

        :param year: The year of this EnterpriseWeekReportBody.  # noqa: E501
        :type: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterpriseWeekReportBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterpriseWeekReportBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
