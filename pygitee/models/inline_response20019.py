# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar_url': 'str',
        'created_at': 'str',
        'description': 'str',
        'email': 'str',
        'enterprise': 'str',
        'events_url': 'str',
        'follow_count': 'str',
        'html_url': 'str',
        'id': 'int',
        'location': 'str',
        'login': 'str',
        'members': 'str',
        'members_url': 'str',
        'name': 'str',
        'owner': 'str',
        'private_repos': 'str',
        'public': 'str',
        'public_repos': 'str',
        'repos_url': 'str',
        'type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'avatar_url': 'avatar_url',
        'created_at': 'created_at',
        'description': 'description',
        'email': 'email',
        'enterprise': 'enterprise',
        'events_url': 'events_url',
        'follow_count': 'follow_count',
        'html_url': 'html_url',
        'id': 'id',
        'location': 'location',
        'login': 'login',
        'members': 'members',
        'members_url': 'members_url',
        'name': 'name',
        'owner': 'owner',
        'private_repos': 'private_repos',
        'public': 'public',
        'public_repos': 'public_repos',
        'repos_url': 'repos_url',
        'type': 'type',
        'url': 'url'
    }

    def __init__(self, avatar_url=None, created_at=None, description=None, email=None, enterprise=None, events_url=None, follow_count=None, html_url=None, id=None, location=None, login=None, members=None, members_url=None, name=None, owner=None, private_repos=None, public=None, public_repos=None, repos_url=None, type=None, url=None):  # noqa: E501
        """InlineResponse20019 - a model defined in Swagger"""  # noqa: E501
        self._avatar_url = None
        self._created_at = None
        self._description = None
        self._email = None
        self._enterprise = None
        self._events_url = None
        self._follow_count = None
        self._html_url = None
        self._id = None
        self._location = None
        self._login = None
        self._members = None
        self._members_url = None
        self._name = None
        self._owner = None
        self._private_repos = None
        self._public = None
        self._public_repos = None
        self._repos_url = None
        self._type = None
        self._url = None
        self.discriminator = None
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if email is not None:
            self.email = email
        if enterprise is not None:
            self.enterprise = enterprise
        if events_url is not None:
            self.events_url = events_url
        if follow_count is not None:
            self.follow_count = follow_count
        if html_url is not None:
            self.html_url = html_url
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if login is not None:
            self.login = login
        if members is not None:
            self.members = members
        if members_url is not None:
            self.members_url = members_url
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if private_repos is not None:
            self.private_repos = private_repos
        if public is not None:
            self.public = public
        if public_repos is not None:
            self.public_repos = public_repos
        if repos_url is not None:
            self.repos_url = repos_url
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url

    @property
    def avatar_url(self):
        """Gets the avatar_url of this InlineResponse20019.  # noqa: E501


        :return: The avatar_url of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this InlineResponse20019.


        :param avatar_url: The avatar_url of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20019.  # noqa: E501


        :return: The created_at of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20019.


        :param created_at: The created_at of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this InlineResponse20019.  # noqa: E501


        :return: The description of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20019.


        :param description: The description of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this InlineResponse20019.  # noqa: E501


        :return: The email of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20019.


        :param email: The email of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enterprise(self):
        """Gets the enterprise of this InlineResponse20019.  # noqa: E501


        :return: The enterprise of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this InlineResponse20019.


        :param enterprise: The enterprise of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._enterprise = enterprise

    @property
    def events_url(self):
        """Gets the events_url of this InlineResponse20019.  # noqa: E501


        :return: The events_url of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._events_url

    @events_url.setter
    def events_url(self, events_url):
        """Sets the events_url of this InlineResponse20019.


        :param events_url: The events_url of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._events_url = events_url

    @property
    def follow_count(self):
        """Gets the follow_count of this InlineResponse20019.  # noqa: E501


        :return: The follow_count of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._follow_count

    @follow_count.setter
    def follow_count(self, follow_count):
        """Sets the follow_count of this InlineResponse20019.


        :param follow_count: The follow_count of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._follow_count = follow_count

    @property
    def html_url(self):
        """Gets the html_url of this InlineResponse20019.  # noqa: E501


        :return: The html_url of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this InlineResponse20019.


        :param html_url: The html_url of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this InlineResponse20019.  # noqa: E501


        :return: The id of this InlineResponse20019.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20019.


        :param id: The id of this InlineResponse20019.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this InlineResponse20019.  # noqa: E501


        :return: The location of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse20019.


        :param location: The location of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def login(self):
        """Gets the login of this InlineResponse20019.  # noqa: E501


        :return: The login of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this InlineResponse20019.


        :param login: The login of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def members(self):
        """Gets the members of this InlineResponse20019.  # noqa: E501


        :return: The members of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this InlineResponse20019.


        :param members: The members of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._members = members

    @property
    def members_url(self):
        """Gets the members_url of this InlineResponse20019.  # noqa: E501


        :return: The members_url of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._members_url

    @members_url.setter
    def members_url(self, members_url):
        """Sets the members_url of this InlineResponse20019.


        :param members_url: The members_url of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._members_url = members_url

    @property
    def name(self):
        """Gets the name of this InlineResponse20019.  # noqa: E501


        :return: The name of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20019.


        :param name: The name of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this InlineResponse20019.  # noqa: E501


        :return: The owner of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this InlineResponse20019.


        :param owner: The owner of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def private_repos(self):
        """Gets the private_repos of this InlineResponse20019.  # noqa: E501


        :return: The private_repos of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._private_repos

    @private_repos.setter
    def private_repos(self, private_repos):
        """Sets the private_repos of this InlineResponse20019.


        :param private_repos: The private_repos of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._private_repos = private_repos

    @property
    def public(self):
        """Gets the public of this InlineResponse20019.  # noqa: E501


        :return: The public of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this InlineResponse20019.


        :param public: The public of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._public = public

    @property
    def public_repos(self):
        """Gets the public_repos of this InlineResponse20019.  # noqa: E501


        :return: The public_repos of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._public_repos

    @public_repos.setter
    def public_repos(self, public_repos):
        """Sets the public_repos of this InlineResponse20019.


        :param public_repos: The public_repos of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._public_repos = public_repos

    @property
    def repos_url(self):
        """Gets the repos_url of this InlineResponse20019.  # noqa: E501


        :return: The repos_url of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._repos_url

    @repos_url.setter
    def repos_url(self, repos_url):
        """Sets the repos_url of this InlineResponse20019.


        :param repos_url: The repos_url of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._repos_url = repos_url

    @property
    def type(self):
        """Gets the type of this InlineResponse20019.  # noqa: E501


        :return: The type of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20019.


        :param type: The type of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this InlineResponse20019.  # noqa: E501


        :return: The url of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse20019.


        :param url: The url of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
