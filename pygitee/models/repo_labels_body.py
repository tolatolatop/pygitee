# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepoLabelsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'color': 'str',
        'name': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'color': 'color',
        'name': 'name'
    }

    def __init__(self, access_token=None, color=None, name=None):  # noqa: E501
        """RepoLabelsBody - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._color = None
        self._name = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        self.color = color
        self.name = name

    @property
    def access_token(self):
        """Gets the access_token of this RepoLabelsBody.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this RepoLabelsBody.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this RepoLabelsBody.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this RepoLabelsBody.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def color(self):
        """Gets the color of this RepoLabelsBody.  # noqa: E501

        标签颜色。为6位的数字，如: 000000  # noqa: E501

        :return: The color of this RepoLabelsBody.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this RepoLabelsBody.

        标签颜色。为6位的数字，如: 000000  # noqa: E501

        :param color: The color of this RepoLabelsBody.  # noqa: E501
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def name(self):
        """Gets the name of this RepoLabelsBody.  # noqa: E501

        标签名称  # noqa: E501

        :return: The name of this RepoLabelsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepoLabelsBody.

        标签名称  # noqa: E501

        :param name: The name of this RepoLabelsBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepoLabelsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepoLabelsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
