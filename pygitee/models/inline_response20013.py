# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20013(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actor': 'str',
        'created_at': 'str',
        'id': 'int',
        'org': 'str',
        'payload': 'object',
        'public': 'str',
        'repo': 'str',
        'type': 'str'
    }

    attribute_map = {
        'actor': 'actor',
        'created_at': 'created_at',
        'id': 'id',
        'org': 'org',
        'payload': 'payload',
        'public': 'public',
        'repo': 'repo',
        'type': 'type'
    }

    def __init__(self, actor=None, created_at=None, id=None, org=None, payload=None, public=None, repo=None, type=None):  # noqa: E501
        """InlineResponse20013 - a model defined in Swagger"""  # noqa: E501
        self._actor = None
        self._created_at = None
        self._id = None
        self._org = None
        self._payload = None
        self._public = None
        self._repo = None
        self._type = None
        self.discriminator = None
        if actor is not None:
            self.actor = actor
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if org is not None:
            self.org = org
        if payload is not None:
            self.payload = payload
        if public is not None:
            self.public = public
        if repo is not None:
            self.repo = repo
        if type is not None:
            self.type = type

    @property
    def actor(self):
        """Gets the actor of this InlineResponse20013.  # noqa: E501


        :return: The actor of this InlineResponse20013.  # noqa: E501
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this InlineResponse20013.


        :param actor: The actor of this InlineResponse20013.  # noqa: E501
        :type: str
        """

        self._actor = actor

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20013.  # noqa: E501


        :return: The created_at of this InlineResponse20013.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20013.


        :param created_at: The created_at of this InlineResponse20013.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this InlineResponse20013.  # noqa: E501


        :return: The id of this InlineResponse20013.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20013.


        :param id: The id of this InlineResponse20013.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org(self):
        """Gets the org of this InlineResponse20013.  # noqa: E501


        :return: The org of this InlineResponse20013.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this InlineResponse20013.


        :param org: The org of this InlineResponse20013.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def payload(self):
        """Gets the payload of this InlineResponse20013.  # noqa: E501


        :return: The payload of this InlineResponse20013.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this InlineResponse20013.


        :param payload: The payload of this InlineResponse20013.  # noqa: E501
        :type: object
        """

        self._payload = payload

    @property
    def public(self):
        """Gets the public of this InlineResponse20013.  # noqa: E501


        :return: The public of this InlineResponse20013.  # noqa: E501
        :rtype: str
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this InlineResponse20013.


        :param public: The public of this InlineResponse20013.  # noqa: E501
        :type: str
        """

        self._public = public

    @property
    def repo(self):
        """Gets the repo of this InlineResponse20013.  # noqa: E501


        :return: The repo of this InlineResponse20013.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this InlineResponse20013.


        :param repo: The repo of this InlineResponse20013.  # noqa: E501
        :type: str
        """

        self._repo = repo

    @property
    def type(self):
        """Gets the type of this InlineResponse20013.  # noqa: E501


        :return: The type of this InlineResponse20013.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20013.


        :param type: The type of this InlineResponse20013.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20013, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20013):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
