# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20015(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'html_url': 'str',
        'id': 'int',
        'sender': 'Sender',
        'unread': 'str',
        'updated_at': 'str',
        'url': 'str'
    }

    attribute_map = {
        'content': 'content',
        'html_url': 'html_url',
        'id': 'id',
        'sender': 'sender',
        'unread': 'unread',
        'updated_at': 'updated_at',
        'url': 'url'
    }

    def __init__(self, content=None, html_url=None, id=None, sender=None, unread=None, updated_at=None, url=None):  # noqa: E501
        """InlineResponse20015 - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._html_url = None
        self._id = None
        self._sender = None
        self._unread = None
        self._updated_at = None
        self._url = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if html_url is not None:
            self.html_url = html_url
        if id is not None:
            self.id = id
        if sender is not None:
            self.sender = sender
        if unread is not None:
            self.unread = unread
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url

    @property
    def content(self):
        """Gets the content of this InlineResponse20015.  # noqa: E501


        :return: The content of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse20015.


        :param content: The content of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def html_url(self):
        """Gets the html_url of this InlineResponse20015.  # noqa: E501


        :return: The html_url of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this InlineResponse20015.


        :param html_url: The html_url of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this InlineResponse20015.  # noqa: E501


        :return: The id of this InlineResponse20015.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20015.


        :param id: The id of this InlineResponse20015.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sender(self):
        """Gets the sender of this InlineResponse20015.  # noqa: E501


        :return: The sender of this InlineResponse20015.  # noqa: E501
        :rtype: Sender
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this InlineResponse20015.


        :param sender: The sender of this InlineResponse20015.  # noqa: E501
        :type: Sender
        """

        self._sender = sender

    @property
    def unread(self):
        """Gets the unread of this InlineResponse20015.  # noqa: E501


        :return: The unread of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this InlineResponse20015.


        :param unread: The unread of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._unread = unread

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20015.  # noqa: E501


        :return: The updated_at of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20015.


        :param updated_at: The updated_at of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this InlineResponse20015.  # noqa: E501


        :return: The url of this InlineResponse20015.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse20015.


        :param url: The url of this InlineResponse20015.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20015, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20015):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
