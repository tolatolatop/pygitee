# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20023(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contexts': 'Contexts',
        'id': 'str',
        'mergers': 'Mergers',
        'mode': 'str',
        'project_id': 'str',
        'pushers': 'Pushers',
        'strict': 'bool',
        'wildcard': 'str'
    }

    attribute_map = {
        'contexts': 'contexts',
        'id': 'id',
        'mergers': 'mergers',
        'mode': 'mode',
        'project_id': 'project_id',
        'pushers': 'pushers',
        'strict': 'strict',
        'wildcard': 'wildcard'
    }

    def __init__(self, contexts=None, id=None, mergers=None, mode=None, project_id=None, pushers=None, strict=None, wildcard=None):  # noqa: E501
        """InlineResponse20023 - a model defined in Swagger"""  # noqa: E501
        self._contexts = None
        self._id = None
        self._mergers = None
        self._mode = None
        self._project_id = None
        self._pushers = None
        self._strict = None
        self._wildcard = None
        self.discriminator = None
        if contexts is not None:
            self.contexts = contexts
        if id is not None:
            self.id = id
        if mergers is not None:
            self.mergers = mergers
        if mode is not None:
            self.mode = mode
        if project_id is not None:
            self.project_id = project_id
        if pushers is not None:
            self.pushers = pushers
        if strict is not None:
            self.strict = strict
        if wildcard is not None:
            self.wildcard = wildcard

    @property
    def contexts(self):
        """Gets the contexts of this InlineResponse20023.  # noqa: E501


        :return: The contexts of this InlineResponse20023.  # noqa: E501
        :rtype: Contexts
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this InlineResponse20023.


        :param contexts: The contexts of this InlineResponse20023.  # noqa: E501
        :type: Contexts
        """

        self._contexts = contexts

    @property
    def id(self):
        """Gets the id of this InlineResponse20023.  # noqa: E501


        :return: The id of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20023.


        :param id: The id of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mergers(self):
        """Gets the mergers of this InlineResponse20023.  # noqa: E501


        :return: The mergers of this InlineResponse20023.  # noqa: E501
        :rtype: Mergers
        """
        return self._mergers

    @mergers.setter
    def mergers(self, mergers):
        """Sets the mergers of this InlineResponse20023.


        :param mergers: The mergers of this InlineResponse20023.  # noqa: E501
        :type: Mergers
        """

        self._mergers = mergers

    @property
    def mode(self):
        """Gets the mode of this InlineResponse20023.  # noqa: E501


        :return: The mode of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InlineResponse20023.


        :param mode: The mode of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def project_id(self):
        """Gets the project_id of this InlineResponse20023.  # noqa: E501


        :return: The project_id of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this InlineResponse20023.


        :param project_id: The project_id of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def pushers(self):
        """Gets the pushers of this InlineResponse20023.  # noqa: E501


        :return: The pushers of this InlineResponse20023.  # noqa: E501
        :rtype: Pushers
        """
        return self._pushers

    @pushers.setter
    def pushers(self, pushers):
        """Sets the pushers of this InlineResponse20023.


        :param pushers: The pushers of this InlineResponse20023.  # noqa: E501
        :type: Pushers
        """

        self._pushers = pushers

    @property
    def strict(self):
        """Gets the strict of this InlineResponse20023.  # noqa: E501


        :return: The strict of this InlineResponse20023.  # noqa: E501
        :rtype: bool
        """
        return self._strict

    @strict.setter
    def strict(self, strict):
        """Sets the strict of this InlineResponse20023.


        :param strict: The strict of this InlineResponse20023.  # noqa: E501
        :type: bool
        """

        self._strict = strict

    @property
    def wildcard(self):
        """Gets the wildcard of this InlineResponse20023.  # noqa: E501


        :return: The wildcard of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._wildcard

    @wildcard.setter
    def wildcard(self, wildcard):
        """Sets the wildcard of this InlineResponse20023.


        :param wildcard: The wildcard of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._wildcard = wildcard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20023, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20023):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
