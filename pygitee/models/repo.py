# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigner': 'Assigner',
        'description': 'str',
        'fork': 'bool',
        'full_name': 'str',
        'html_url': 'str',
        'human_name': 'str',
        'id': 'int',
        'internal': 'str',
        'name': 'str',
        'namespace': 'Namespace',
        'owner': 'Owner',
        'path': 'str',
        'private': 'bool',
        'public': 'bool',
        'ssh_url': 'str',
        'url': 'str'
    }

    attribute_map = {
        'assigner': 'assigner',
        'description': 'description',
        'fork': 'fork',
        'full_name': 'full_name',
        'html_url': 'html_url',
        'human_name': 'human_name',
        'id': 'id',
        'internal': 'internal',
        'name': 'name',
        'namespace': 'namespace',
        'owner': 'owner',
        'path': 'path',
        'private': 'private',
        'public': 'public',
        'ssh_url': 'ssh_url',
        'url': 'url'
    }

    def __init__(self, assigner=None, description=None, fork=None, full_name=None, html_url=None, human_name=None, id=None, internal=None, name=None, namespace=None, owner=None, path=None, private=None, public=None, ssh_url=None, url=None):  # noqa: E501
        """Repo - a model defined in Swagger"""  # noqa: E501
        self._assigner = None
        self._description = None
        self._fork = None
        self._full_name = None
        self._html_url = None
        self._human_name = None
        self._id = None
        self._internal = None
        self._name = None
        self._namespace = None
        self._owner = None
        self._path = None
        self._private = None
        self._public = None
        self._ssh_url = None
        self._url = None
        self.discriminator = None
        if assigner is not None:
            self.assigner = assigner
        if description is not None:
            self.description = description
        if fork is not None:
            self.fork = fork
        if full_name is not None:
            self.full_name = full_name
        if html_url is not None:
            self.html_url = html_url
        if human_name is not None:
            self.human_name = human_name
        if id is not None:
            self.id = id
        if internal is not None:
            self.internal = internal
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if owner is not None:
            self.owner = owner
        if path is not None:
            self.path = path
        if private is not None:
            self.private = private
        if public is not None:
            self.public = public
        if ssh_url is not None:
            self.ssh_url = ssh_url
        if url is not None:
            self.url = url

    @property
    def assigner(self):
        """Gets the assigner of this Repo.  # noqa: E501


        :return: The assigner of this Repo.  # noqa: E501
        :rtype: Assigner
        """
        return self._assigner

    @assigner.setter
    def assigner(self, assigner):
        """Sets the assigner of this Repo.


        :param assigner: The assigner of this Repo.  # noqa: E501
        :type: Assigner
        """

        self._assigner = assigner

    @property
    def description(self):
        """Gets the description of this Repo.  # noqa: E501


        :return: The description of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Repo.


        :param description: The description of this Repo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fork(self):
        """Gets the fork of this Repo.  # noqa: E501


        :return: The fork of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._fork

    @fork.setter
    def fork(self, fork):
        """Sets the fork of this Repo.


        :param fork: The fork of this Repo.  # noqa: E501
        :type: bool
        """

        self._fork = fork

    @property
    def full_name(self):
        """Gets the full_name of this Repo.  # noqa: E501


        :return: The full_name of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Repo.


        :param full_name: The full_name of this Repo.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def html_url(self):
        """Gets the html_url of this Repo.  # noqa: E501


        :return: The html_url of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Repo.


        :param html_url: The html_url of this Repo.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def human_name(self):
        """Gets the human_name of this Repo.  # noqa: E501


        :return: The human_name of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._human_name

    @human_name.setter
    def human_name(self, human_name):
        """Sets the human_name of this Repo.


        :param human_name: The human_name of this Repo.  # noqa: E501
        :type: str
        """

        self._human_name = human_name

    @property
    def id(self):
        """Gets the id of this Repo.  # noqa: E501


        :return: The id of this Repo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Repo.


        :param id: The id of this Repo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def internal(self):
        """Gets the internal of this Repo.  # noqa: E501


        :return: The internal of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this Repo.


        :param internal: The internal of this Repo.  # noqa: E501
        :type: str
        """

        self._internal = internal

    @property
    def name(self):
        """Gets the name of this Repo.  # noqa: E501


        :return: The name of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Repo.


        :param name: The name of this Repo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Repo.  # noqa: E501


        :return: The namespace of this Repo.  # noqa: E501
        :rtype: Namespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Repo.


        :param namespace: The namespace of this Repo.  # noqa: E501
        :type: Namespace
        """

        self._namespace = namespace

    @property
    def owner(self):
        """Gets the owner of this Repo.  # noqa: E501


        :return: The owner of this Repo.  # noqa: E501
        :rtype: Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Repo.


        :param owner: The owner of this Repo.  # noqa: E501
        :type: Owner
        """

        self._owner = owner

    @property
    def path(self):
        """Gets the path of this Repo.  # noqa: E501


        :return: The path of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Repo.


        :param path: The path of this Repo.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def private(self):
        """Gets the private of this Repo.  # noqa: E501


        :return: The private of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Repo.


        :param private: The private of this Repo.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def public(self):
        """Gets the public of this Repo.  # noqa: E501


        :return: The public of this Repo.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Repo.


        :param public: The public of this Repo.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def ssh_url(self):
        """Gets the ssh_url of this Repo.  # noqa: E501


        :return: The ssh_url of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._ssh_url

    @ssh_url.setter
    def ssh_url(self, ssh_url):
        """Sets the ssh_url of this Repo.


        :param ssh_url: The ssh_url of this Repo.  # noqa: E501
        :type: str
        """

        self._ssh_url = ssh_url

    @property
    def url(self):
        """Gets the url of this Repo.  # noqa: E501


        :return: The url of this Repo.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Repo.


        :param url: The url of this Repo.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
