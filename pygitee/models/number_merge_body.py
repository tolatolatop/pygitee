# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NumberMergeBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'description': 'str',
        'merge_method': 'str',
        'prune_source_branch': 'bool',
        'title': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'description': 'description',
        'merge_method': 'merge_method',
        'prune_source_branch': 'prune_source_branch',
        'title': 'title'
    }

    def __init__(self, access_token=None, description=None, merge_method=None, prune_source_branch=None, title=None):  # noqa: E501
        """NumberMergeBody - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._description = None
        self._merge_method = None
        self._prune_source_branch = None
        self._title = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if description is not None:
            self.description = description
        if merge_method is not None:
            self.merge_method = merge_method
        if prune_source_branch is not None:
            self.prune_source_branch = prune_source_branch
        if title is not None:
            self.title = title

    @property
    def access_token(self):
        """Gets the access_token of this NumberMergeBody.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this NumberMergeBody.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this NumberMergeBody.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this NumberMergeBody.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def description(self):
        """Gets the description of this NumberMergeBody.  # noqa: E501

        可选。合并描述，默认为 \"Merge pull request !{pr_id} from {author}/{source_branch}\"，与页面显示的默认一致。  # noqa: E501

        :return: The description of this NumberMergeBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NumberMergeBody.

        可选。合并描述，默认为 \"Merge pull request !{pr_id} from {author}/{source_branch}\"，与页面显示的默认一致。  # noqa: E501

        :param description: The description of this NumberMergeBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def merge_method(self):
        """Gets the merge_method of this NumberMergeBody.  # noqa: E501

        可选。合并PR的方法，merge（合并所有提交）、squash（扁平化分支合并）和rebase（变基并合并）。默认为merge。  # noqa: E501

        :return: The merge_method of this NumberMergeBody.  # noqa: E501
        :rtype: str
        """
        return self._merge_method

    @merge_method.setter
    def merge_method(self, merge_method):
        """Sets the merge_method of this NumberMergeBody.

        可选。合并PR的方法，merge（合并所有提交）、squash（扁平化分支合并）和rebase（变基并合并）。默认为merge。  # noqa: E501

        :param merge_method: The merge_method of this NumberMergeBody.  # noqa: E501
        :type: str
        """

        self._merge_method = merge_method

    @property
    def prune_source_branch(self):
        """Gets the prune_source_branch of this NumberMergeBody.  # noqa: E501

        可选。合并PR后是否删除源分支，默认false（不删除）  # noqa: E501

        :return: The prune_source_branch of this NumberMergeBody.  # noqa: E501
        :rtype: bool
        """
        return self._prune_source_branch

    @prune_source_branch.setter
    def prune_source_branch(self, prune_source_branch):
        """Sets the prune_source_branch of this NumberMergeBody.

        可选。合并PR后是否删除源分支，默认false（不删除）  # noqa: E501

        :param prune_source_branch: The prune_source_branch of this NumberMergeBody.  # noqa: E501
        :type: bool
        """

        self._prune_source_branch = prune_source_branch

    @property
    def title(self):
        """Gets the title of this NumberMergeBody.  # noqa: E501

        可选。合并标题，默认为PR的标题  # noqa: E501

        :return: The title of this NumberMergeBody.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NumberMergeBody.

        可选。合并标题，默认为PR的标题  # noqa: E501

        :param title: The title of this NumberMergeBody.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NumberMergeBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NumberMergeBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
