# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'str',
        'api_reviewers': 'ApiReviewers',
        'api_reviewers_number': 'str',
        'assignees': 'Assignees',
        'assignees_number': 'str',
        'base': 'str',
        'body': 'str',
        'body_html': 'str',
        'can_merge_check': 'str',
        'closed_at': 'str',
        'comments_url': 'str',
        'commits_url': 'str',
        'created_at': 'str',
        'diff_url': 'str',
        'draft': 'str',
        'head': 'str',
        'html_url': 'str',
        'id': 'str',
        'issue_url': 'str',
        'labels': 'Labels',
        'locked': 'str',
        'mergeable': 'str',
        'merged_at': 'str',
        'milestone': 'Milestone',
        'number': 'str',
        'patch_url': 'str',
        'ref_pull_requests': 'RefPullRequests',
        'review_comment_url': 'str',
        'review_comments_url': 'str',
        'state': 'str',
        'testers': 'Testers',
        'testers_number': 'str',
        'title': 'str',
        'updated_at': 'str',
        'url': 'str',
        'user': 'str'
    }

    attribute_map = {
        'links': '_links',
        'api_reviewers': 'api_reviewers',
        'api_reviewers_number': 'api_reviewers_number',
        'assignees': 'assignees',
        'assignees_number': 'assignees_number',
        'base': 'base',
        'body': 'body',
        'body_html': 'body_html',
        'can_merge_check': 'can_merge_check',
        'closed_at': 'closed_at',
        'comments_url': 'comments_url',
        'commits_url': 'commits_url',
        'created_at': 'created_at',
        'diff_url': 'diff_url',
        'draft': 'draft',
        'head': 'head',
        'html_url': 'html_url',
        'id': 'id',
        'issue_url': 'issue_url',
        'labels': 'labels',
        'locked': 'locked',
        'mergeable': 'mergeable',
        'merged_at': 'merged_at',
        'milestone': 'milestone',
        'number': 'number',
        'patch_url': 'patch_url',
        'ref_pull_requests': 'ref_pull_requests',
        'review_comment_url': 'review_comment_url',
        'review_comments_url': 'review_comments_url',
        'state': 'state',
        'testers': 'testers',
        'testers_number': 'testers_number',
        'title': 'title',
        'updated_at': 'updated_at',
        'url': 'url',
        'user': 'user'
    }

    def __init__(self, links=None, api_reviewers=None, api_reviewers_number=None, assignees=None, assignees_number=None, base=None, body=None, body_html=None, can_merge_check=None, closed_at=None, comments_url=None, commits_url=None, created_at=None, diff_url=None, draft=None, head=None, html_url=None, id=None, issue_url=None, labels=None, locked=None, mergeable=None, merged_at=None, milestone=None, number=None, patch_url=None, ref_pull_requests=None, review_comment_url=None, review_comments_url=None, state=None, testers=None, testers_number=None, title=None, updated_at=None, url=None, user=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._api_reviewers = None
        self._api_reviewers_number = None
        self._assignees = None
        self._assignees_number = None
        self._base = None
        self._body = None
        self._body_html = None
        self._can_merge_check = None
        self._closed_at = None
        self._comments_url = None
        self._commits_url = None
        self._created_at = None
        self._diff_url = None
        self._draft = None
        self._head = None
        self._html_url = None
        self._id = None
        self._issue_url = None
        self._labels = None
        self._locked = None
        self._mergeable = None
        self._merged_at = None
        self._milestone = None
        self._number = None
        self._patch_url = None
        self._ref_pull_requests = None
        self._review_comment_url = None
        self._review_comments_url = None
        self._state = None
        self._testers = None
        self._testers_number = None
        self._title = None
        self._updated_at = None
        self._url = None
        self._user = None
        self.discriminator = None
        if links is not None:
            self.links = links
        if api_reviewers is not None:
            self.api_reviewers = api_reviewers
        if api_reviewers_number is not None:
            self.api_reviewers_number = api_reviewers_number
        if assignees is not None:
            self.assignees = assignees
        if assignees_number is not None:
            self.assignees_number = assignees_number
        if base is not None:
            self.base = base
        if body is not None:
            self.body = body
        if body_html is not None:
            self.body_html = body_html
        if can_merge_check is not None:
            self.can_merge_check = can_merge_check
        if closed_at is not None:
            self.closed_at = closed_at
        if comments_url is not None:
            self.comments_url = comments_url
        if commits_url is not None:
            self.commits_url = commits_url
        if created_at is not None:
            self.created_at = created_at
        if diff_url is not None:
            self.diff_url = diff_url
        if draft is not None:
            self.draft = draft
        if head is not None:
            self.head = head
        if html_url is not None:
            self.html_url = html_url
        if id is not None:
            self.id = id
        if issue_url is not None:
            self.issue_url = issue_url
        if labels is not None:
            self.labels = labels
        if locked is not None:
            self.locked = locked
        if mergeable is not None:
            self.mergeable = mergeable
        if merged_at is not None:
            self.merged_at = merged_at
        if milestone is not None:
            self.milestone = milestone
        if number is not None:
            self.number = number
        if patch_url is not None:
            self.patch_url = patch_url
        if ref_pull_requests is not None:
            self.ref_pull_requests = ref_pull_requests
        if review_comment_url is not None:
            self.review_comment_url = review_comment_url
        if review_comments_url is not None:
            self.review_comments_url = review_comments_url
        if state is not None:
            self.state = state
        if testers is not None:
            self.testers = testers
        if testers_number is not None:
            self.testers_number = testers_number
        if title is not None:
            self.title = title
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url
        if user is not None:
            self.user = user

    @property
    def links(self):
        """Gets the links of this InlineResponse2001.  # noqa: E501


        :return: The links of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InlineResponse2001.


        :param links: The links of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._links = links

    @property
    def api_reviewers(self):
        """Gets the api_reviewers of this InlineResponse2001.  # noqa: E501


        :return: The api_reviewers of this InlineResponse2001.  # noqa: E501
        :rtype: ApiReviewers
        """
        return self._api_reviewers

    @api_reviewers.setter
    def api_reviewers(self, api_reviewers):
        """Sets the api_reviewers of this InlineResponse2001.


        :param api_reviewers: The api_reviewers of this InlineResponse2001.  # noqa: E501
        :type: ApiReviewers
        """

        self._api_reviewers = api_reviewers

    @property
    def api_reviewers_number(self):
        """Gets the api_reviewers_number of this InlineResponse2001.  # noqa: E501


        :return: The api_reviewers_number of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._api_reviewers_number

    @api_reviewers_number.setter
    def api_reviewers_number(self, api_reviewers_number):
        """Sets the api_reviewers_number of this InlineResponse2001.


        :param api_reviewers_number: The api_reviewers_number of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._api_reviewers_number = api_reviewers_number

    @property
    def assignees(self):
        """Gets the assignees of this InlineResponse2001.  # noqa: E501


        :return: The assignees of this InlineResponse2001.  # noqa: E501
        :rtype: Assignees
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this InlineResponse2001.


        :param assignees: The assignees of this InlineResponse2001.  # noqa: E501
        :type: Assignees
        """

        self._assignees = assignees

    @property
    def assignees_number(self):
        """Gets the assignees_number of this InlineResponse2001.  # noqa: E501


        :return: The assignees_number of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._assignees_number

    @assignees_number.setter
    def assignees_number(self, assignees_number):
        """Sets the assignees_number of this InlineResponse2001.


        :param assignees_number: The assignees_number of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._assignees_number = assignees_number

    @property
    def base(self):
        """Gets the base of this InlineResponse2001.  # noqa: E501


        :return: The base of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this InlineResponse2001.


        :param base: The base of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def body(self):
        """Gets the body of this InlineResponse2001.  # noqa: E501


        :return: The body of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this InlineResponse2001.


        :param body: The body of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this InlineResponse2001.  # noqa: E501


        :return: The body_html of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this InlineResponse2001.


        :param body_html: The body_html of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._body_html = body_html

    @property
    def can_merge_check(self):
        """Gets the can_merge_check of this InlineResponse2001.  # noqa: E501


        :return: The can_merge_check of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._can_merge_check

    @can_merge_check.setter
    def can_merge_check(self, can_merge_check):
        """Sets the can_merge_check of this InlineResponse2001.


        :param can_merge_check: The can_merge_check of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._can_merge_check = can_merge_check

    @property
    def closed_at(self):
        """Gets the closed_at of this InlineResponse2001.  # noqa: E501


        :return: The closed_at of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this InlineResponse2001.


        :param closed_at: The closed_at of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._closed_at = closed_at

    @property
    def comments_url(self):
        """Gets the comments_url of this InlineResponse2001.  # noqa: E501


        :return: The comments_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this InlineResponse2001.


        :param comments_url: The comments_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._comments_url = comments_url

    @property
    def commits_url(self):
        """Gets the commits_url of this InlineResponse2001.  # noqa: E501


        :return: The commits_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._commits_url

    @commits_url.setter
    def commits_url(self, commits_url):
        """Sets the commits_url of this InlineResponse2001.


        :param commits_url: The commits_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._commits_url = commits_url

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2001.  # noqa: E501


        :return: The created_at of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2001.


        :param created_at: The created_at of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def diff_url(self):
        """Gets the diff_url of this InlineResponse2001.  # noqa: E501


        :return: The diff_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._diff_url

    @diff_url.setter
    def diff_url(self, diff_url):
        """Sets the diff_url of this InlineResponse2001.


        :param diff_url: The diff_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._diff_url = diff_url

    @property
    def draft(self):
        """Gets the draft of this InlineResponse2001.  # noqa: E501


        :return: The draft of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this InlineResponse2001.


        :param draft: The draft of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._draft = draft

    @property
    def head(self):
        """Gets the head of this InlineResponse2001.  # noqa: E501


        :return: The head of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this InlineResponse2001.


        :param head: The head of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._head = head

    @property
    def html_url(self):
        """Gets the html_url of this InlineResponse2001.  # noqa: E501


        :return: The html_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this InlineResponse2001.


        :param html_url: The html_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this InlineResponse2001.  # noqa: E501


        :return: The id of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2001.


        :param id: The id of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def issue_url(self):
        """Gets the issue_url of this InlineResponse2001.  # noqa: E501


        :return: The issue_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._issue_url

    @issue_url.setter
    def issue_url(self, issue_url):
        """Sets the issue_url of this InlineResponse2001.


        :param issue_url: The issue_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._issue_url = issue_url

    @property
    def labels(self):
        """Gets the labels of this InlineResponse2001.  # noqa: E501


        :return: The labels of this InlineResponse2001.  # noqa: E501
        :rtype: Labels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this InlineResponse2001.


        :param labels: The labels of this InlineResponse2001.  # noqa: E501
        :type: Labels
        """

        self._labels = labels

    @property
    def locked(self):
        """Gets the locked of this InlineResponse2001.  # noqa: E501


        :return: The locked of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InlineResponse2001.


        :param locked: The locked of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._locked = locked

    @property
    def mergeable(self):
        """Gets the mergeable of this InlineResponse2001.  # noqa: E501


        :return: The mergeable of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._mergeable

    @mergeable.setter
    def mergeable(self, mergeable):
        """Sets the mergeable of this InlineResponse2001.


        :param mergeable: The mergeable of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._mergeable = mergeable

    @property
    def merged_at(self):
        """Gets the merged_at of this InlineResponse2001.  # noqa: E501


        :return: The merged_at of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._merged_at

    @merged_at.setter
    def merged_at(self, merged_at):
        """Sets the merged_at of this InlineResponse2001.


        :param merged_at: The merged_at of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._merged_at = merged_at

    @property
    def milestone(self):
        """Gets the milestone of this InlineResponse2001.  # noqa: E501


        :return: The milestone of this InlineResponse2001.  # noqa: E501
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this InlineResponse2001.


        :param milestone: The milestone of this InlineResponse2001.  # noqa: E501
        :type: Milestone
        """

        self._milestone = milestone

    @property
    def number(self):
        """Gets the number of this InlineResponse2001.  # noqa: E501


        :return: The number of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InlineResponse2001.


        :param number: The number of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def patch_url(self):
        """Gets the patch_url of this InlineResponse2001.  # noqa: E501


        :return: The patch_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._patch_url

    @patch_url.setter
    def patch_url(self, patch_url):
        """Sets the patch_url of this InlineResponse2001.


        :param patch_url: The patch_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._patch_url = patch_url

    @property
    def ref_pull_requests(self):
        """Gets the ref_pull_requests of this InlineResponse2001.  # noqa: E501


        :return: The ref_pull_requests of this InlineResponse2001.  # noqa: E501
        :rtype: RefPullRequests
        """
        return self._ref_pull_requests

    @ref_pull_requests.setter
    def ref_pull_requests(self, ref_pull_requests):
        """Sets the ref_pull_requests of this InlineResponse2001.


        :param ref_pull_requests: The ref_pull_requests of this InlineResponse2001.  # noqa: E501
        :type: RefPullRequests
        """

        self._ref_pull_requests = ref_pull_requests

    @property
    def review_comment_url(self):
        """Gets the review_comment_url of this InlineResponse2001.  # noqa: E501


        :return: The review_comment_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._review_comment_url

    @review_comment_url.setter
    def review_comment_url(self, review_comment_url):
        """Sets the review_comment_url of this InlineResponse2001.


        :param review_comment_url: The review_comment_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._review_comment_url = review_comment_url

    @property
    def review_comments_url(self):
        """Gets the review_comments_url of this InlineResponse2001.  # noqa: E501


        :return: The review_comments_url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._review_comments_url

    @review_comments_url.setter
    def review_comments_url(self, review_comments_url):
        """Sets the review_comments_url of this InlineResponse2001.


        :param review_comments_url: The review_comments_url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._review_comments_url = review_comments_url

    @property
    def state(self):
        """Gets the state of this InlineResponse2001.  # noqa: E501


        :return: The state of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse2001.


        :param state: The state of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def testers(self):
        """Gets the testers of this InlineResponse2001.  # noqa: E501


        :return: The testers of this InlineResponse2001.  # noqa: E501
        :rtype: Testers
        """
        return self._testers

    @testers.setter
    def testers(self, testers):
        """Sets the testers of this InlineResponse2001.


        :param testers: The testers of this InlineResponse2001.  # noqa: E501
        :type: Testers
        """

        self._testers = testers

    @property
    def testers_number(self):
        """Gets the testers_number of this InlineResponse2001.  # noqa: E501


        :return: The testers_number of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._testers_number

    @testers_number.setter
    def testers_number(self, testers_number):
        """Sets the testers_number of this InlineResponse2001.


        :param testers_number: The testers_number of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._testers_number = testers_number

    @property
    def title(self):
        """Gets the title of this InlineResponse2001.  # noqa: E501


        :return: The title of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse2001.


        :param title: The title of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse2001.  # noqa: E501


        :return: The updated_at of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse2001.


        :param updated_at: The updated_at of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this InlineResponse2001.  # noqa: E501


        :return: The url of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse2001.


        :param url: The url of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user(self):
        """Gets the user of this InlineResponse2001.  # noqa: E501


        :return: The user of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse2001.


        :param user: The user of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
