# coding: utf-8

"""
    Gitee OpenApi

    All api provided by Gitee  # noqa: E501

    OpenAPI spec version: 1.1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PullsNumberBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'assignees_number': 'int',
        'body': 'str',
        'draft': 'bool',
        'labels': 'str',
        'milestone_number': 'int',
        'ref_pull_request_numbers': 'str',
        'squash': 'bool',
        'state': 'str',
        'testers_number': 'int',
        'title': 'str'
    }

    attribute_map = {
        'access_token': 'access_token',
        'assignees_number': 'assignees_number',
        'body': 'body',
        'draft': 'draft',
        'labels': 'labels',
        'milestone_number': 'milestone_number',
        'ref_pull_request_numbers': 'ref_pull_request_numbers',
        'squash': 'squash',
        'state': 'state',
        'testers_number': 'testers_number',
        'title': 'title'
    }

    def __init__(self, access_token=None, assignees_number=None, body=None, draft=None, labels=None, milestone_number=None, ref_pull_request_numbers=None, squash=None, state=None, testers_number=None, title=None):  # noqa: E501
        """PullsNumberBody - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._assignees_number = None
        self._body = None
        self._draft = None
        self._labels = None
        self._milestone_number = None
        self._ref_pull_request_numbers = None
        self._squash = None
        self._state = None
        self._testers_number = None
        self._title = None
        self.discriminator = None
        if access_token is not None:
            self.access_token = access_token
        if assignees_number is not None:
            self.assignees_number = assignees_number
        if body is not None:
            self.body = body
        if draft is not None:
            self.draft = draft
        if labels is not None:
            self.labels = labels
        if milestone_number is not None:
            self.milestone_number = milestone_number
        if ref_pull_request_numbers is not None:
            self.ref_pull_request_numbers = ref_pull_request_numbers
        if squash is not None:
            self.squash = squash
        if state is not None:
            self.state = state
        if testers_number is not None:
            self.testers_number = testers_number
        if title is not None:
            self.title = title

    @property
    def access_token(self):
        """Gets the access_token of this PullsNumberBody.  # noqa: E501

        用户授权码  # noqa: E501

        :return: The access_token of this PullsNumberBody.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this PullsNumberBody.

        用户授权码  # noqa: E501

        :param access_token: The access_token of this PullsNumberBody.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def assignees_number(self):
        """Gets the assignees_number of this PullsNumberBody.  # noqa: E501

        可选。最少审查人数  # noqa: E501

        :return: The assignees_number of this PullsNumberBody.  # noqa: E501
        :rtype: int
        """
        return self._assignees_number

    @assignees_number.setter
    def assignees_number(self, assignees_number):
        """Sets the assignees_number of this PullsNumberBody.

        可选。最少审查人数  # noqa: E501

        :param assignees_number: The assignees_number of this PullsNumberBody.  # noqa: E501
        :type: int
        """

        self._assignees_number = assignees_number

    @property
    def body(self):
        """Gets the body of this PullsNumberBody.  # noqa: E501

        可选。Pull Request 内容  # noqa: E501

        :return: The body of this PullsNumberBody.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PullsNumberBody.

        可选。Pull Request 内容  # noqa: E501

        :param body: The body of this PullsNumberBody.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def draft(self):
        """Gets the draft of this PullsNumberBody.  # noqa: E501

        是否设置为草稿  # noqa: E501

        :return: The draft of this PullsNumberBody.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this PullsNumberBody.

        是否设置为草稿  # noqa: E501

        :param draft: The draft of this PullsNumberBody.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def labels(self):
        """Gets the labels of this PullsNumberBody.  # noqa: E501

        用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance  # noqa: E501

        :return: The labels of this PullsNumberBody.  # noqa: E501
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PullsNumberBody.

        用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance  # noqa: E501

        :param labels: The labels of this PullsNumberBody.  # noqa: E501
        :type: str
        """

        self._labels = labels

    @property
    def milestone_number(self):
        """Gets the milestone_number of this PullsNumberBody.  # noqa: E501

        可选。里程碑序号(id)  # noqa: E501

        :return: The milestone_number of this PullsNumberBody.  # noqa: E501
        :rtype: int
        """
        return self._milestone_number

    @milestone_number.setter
    def milestone_number(self, milestone_number):
        """Sets the milestone_number of this PullsNumberBody.

        可选。里程碑序号(id)  # noqa: E501

        :param milestone_number: The milestone_number of this PullsNumberBody.  # noqa: E501
        :type: int
        """

        self._milestone_number = milestone_number

    @property
    def ref_pull_request_numbers(self):
        """Gets the ref_pull_request_numbers of this PullsNumberBody.  # noqa: E501

        可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19  # noqa: E501

        :return: The ref_pull_request_numbers of this PullsNumberBody.  # noqa: E501
        :rtype: str
        """
        return self._ref_pull_request_numbers

    @ref_pull_request_numbers.setter
    def ref_pull_request_numbers(self, ref_pull_request_numbers):
        """Sets the ref_pull_request_numbers of this PullsNumberBody.

        可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19  # noqa: E501

        :param ref_pull_request_numbers: The ref_pull_request_numbers of this PullsNumberBody.  # noqa: E501
        :type: str
        """

        self._ref_pull_request_numbers = ref_pull_request_numbers

    @property
    def squash(self):
        """Gets the squash of this PullsNumberBody.  # noqa: E501

        接受 Pull Request 时使用扁平化（Squash）合并  # noqa: E501

        :return: The squash of this PullsNumberBody.  # noqa: E501
        :rtype: bool
        """
        return self._squash

    @squash.setter
    def squash(self, squash):
        """Sets the squash of this PullsNumberBody.

        接受 Pull Request 时使用扁平化（Squash）合并  # noqa: E501

        :param squash: The squash of this PullsNumberBody.  # noqa: E501
        :type: bool
        """

        self._squash = squash

    @property
    def state(self):
        """Gets the state of this PullsNumberBody.  # noqa: E501

        可选。Pull Request 状态  # noqa: E501

        :return: The state of this PullsNumberBody.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PullsNumberBody.

        可选。Pull Request 状态  # noqa: E501

        :param state: The state of this PullsNumberBody.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def testers_number(self):
        """Gets the testers_number of this PullsNumberBody.  # noqa: E501

        可选。最少测试人数  # noqa: E501

        :return: The testers_number of this PullsNumberBody.  # noqa: E501
        :rtype: int
        """
        return self._testers_number

    @testers_number.setter
    def testers_number(self, testers_number):
        """Sets the testers_number of this PullsNumberBody.

        可选。最少测试人数  # noqa: E501

        :param testers_number: The testers_number of this PullsNumberBody.  # noqa: E501
        :type: int
        """

        self._testers_number = testers_number

    @property
    def title(self):
        """Gets the title of this PullsNumberBody.  # noqa: E501

        可选。Pull Request 标题  # noqa: E501

        :return: The title of this PullsNumberBody.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PullsNumberBody.

        可选。Pull Request 标题  # noqa: E501

        :param title: The title of this PullsNumberBody.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PullsNumberBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PullsNumberBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
